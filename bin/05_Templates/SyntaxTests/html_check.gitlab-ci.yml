#!/bin/bash
image: registry.git.rwth-aachen.de/ebc/ebc_intern/dymola-docker:miniconda-latest

stages:
    - build
    - HTMLCheck
    - log
    - deploy
    - openMR
    - post
    - StyleCheck

 
            
trigger_branch:
    stage: build
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - mkdir public
        - mkdir -p public/$CI_COMMIT_REF_NAME
        - shopt -s globstar        
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --log  --align --font
        - mv "AixLib/HTML-logfile.txt" "public/"
    after_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            message="Correct HTML Code again";         
            git add AixLib; 
            echo $message;
            git commit -m "$message";
            git push http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        paths:
            - public
        expire_in: 1 day 
    
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/
            
            
Check_HTML:
    stage: HTMLCheck
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        
    script:
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-view --log  --align --font
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            echo "Second test was not successful!"
            echo "Read HTML - logfile!"
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code again/

pages:
    stage: deploy
   
    dependencies: 
        - trigger_branch
    before_script:
        - apt-get update -y
        - apt-get install zip unzip -y
    script:
        # export
        # set +e
        # curl --fail --header "PRIVATE-TOKEN:$GL_TOKEN" $CI_PAGES_URL/content.zip -o content.zip
        # if [ -e "content.zip" ]; then unzip "content.zip"; rm "content.zip"; fi
        # set -e
        # Add/update content
        # mkdir -p .public/$CI_COMMIT_REF_NAME
        # cp -r public/* .public
        # Zip the content and publish the zip again
        # zip -r "content.zip" "public"
        # mv "content.zip" "public/"
        - mkdir .public
        - cp -r public/* .public
        - cp -r index.html .public
        - mv .public public
    artifacts:
        paths:
            - public
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/

        
        
HTML_Check:
    stage: HTMLCheck
    services:
        -  docker
  
    
    before_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
        - echo $Newbranch
        - echo $CI_COMMIT_BRANCH
        - echo $CI_COMMIT_REF_NAME
        - pip install anybadge
        - export
    script:
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-view --log  --align --font
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --align --font --log;
            git checkout -B $Newbranch;
            message="Correct HTML Code";
            git add AixLib;
            echo $message;
            git commit -m "$message" ;
            git push --force http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            rm bin/06_Configfiles/exit.sh;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    only:
        variables:
            - $CI_COMMIT_REF_NAME == $TARGET_BRANCH 
mrpost:
    stage: post
    dependencies: 
        - pages
    before_script:
        - apt-get update -y
        - apt-get install jq -y
        - pip install anybadge
    script:
        - anybadge -l HTML-logfile -v 2.22. -f HTML-logfile.svg 2=red 4=orange 8=yellow 10=green
        - newline=$' \n '
        - msg1=$'## This is a CI-Post \n '
        # msg2="**HTML-Code score** on your branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME [![[HTML-logfile]( $CI_PAGES_URL/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME/pylint.svg )]( $CI_PAGES_URL/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME/pylint.html )  "
        - msg2="Correct **HTML-Code** on your branch $CI_COMMIT_REF_NAME "
        # msg3="**HTML-logfile** on branch $CI_COMMIT_REF_NAME [![HTML-logfile](HTML-logfile.svg)]( $CI_PAGES_URL/$CI_COMMIT_REF_NAME/pylint.html ) .  "
        - msg3=" Merge request Push Corrected **HTML code** on branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME   "
        # msg4="You can view the **HTML-logfile** by clicking on the badges  "
        - msg4="Merge your corrected HTML code by press the Merge button  "
        - msg5="After merge request **pull** your Repository" 
        - msg=$msg1$msg2$newline$msg3$newline$msg4$newline$msg5
        - curl --request GET --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes | tee notes.json
        - mapfile -t ids < <(jq '.[].id' notes.json)
        - mapfile -t bodys < <(jq '.[].body' notes.json)
        - len=${#ids[@]}
        - for i in $(seq 0 $len); do if [[ ${bodys[i]} == *"This is a CI-Post"* ]]; then id=${ids[i]}; break; fi; done
        - if [ -z ${id+x} ]; then curl -d "body=$msg" --request POST --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes?body=note; else curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note; fi
        - curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note
        
    artifacts:
        paths:
            - public
            - notes.json
    only:
        - merge_requests


Open_Merge_Request:
    stage: openMR
    only:
        - /^feature\/*/
    services:
        -  docker
    before_script:
        - sudo apt-get install jq -y
    script:
       - sudo chmod +x bin/06_Configfiles/autoMergeRequest.sh
       - git config --global user.email "${GITLAB_USER_EMAIL}"
       - git config --global user.name  "${GITLAB_USER_NAME}" 
       - bin/06_Configfiles/autoMergeRequest.sh
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code again/
        
    artifacts:
        paths:
            - public


  
     