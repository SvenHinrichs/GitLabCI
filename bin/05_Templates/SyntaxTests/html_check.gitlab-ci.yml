#!/bin/bash
image: registry.git.rwth-aachen.de/ebc/ebc_intern/dymola-docker:miniconda-latest

stages:
    - build
    - HTMLCheck
    - deploy
    - openMR
    - post
            
trigger_branch:
    stage: build
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --log  --align --font
        
    after_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            message="Correct HTML Code again";         
            git add AixLib; 
            echo $message;
            git commit -m "$message";
            git push http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 1 day 
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/
            
            
Check_HTML:
    stage: HTMLCheck
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        
    script:
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-view --log  --align --font
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            echo "Second test was not successful!"
            echo "Read HTML - logfile!"
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code again/

#pages:
#    stage: deploy
#   
#    dependencies: 
#        - trigger_branch
#    before_script:
#        - apt-get update -y
#        - apt-get install zip unzip -y
#    script:
        # export
        # set +e
        # curl --fail --header "PRIVATE-TOKEN:$GL_TOKEN" $CI_PAGES_URL/content.zip -o content.zip
        # if [ -e "content.zip" ]; then unzip "content.zip"; rm "content.zip"; fi
        # set -e
        # Add/update content
        # mkdir -p .public/$CI_COMMIT_REF_NAME
        # cp -r public/* .public
        # Zip the content and publish the zip again
        # zip -r "content.zip" "public"
        # mv "content.zip" "public/"
#        - mkdir .public
#        - cp -r public/* .public
#        - cp -r index.html .public
#        - mv .public public
#   artifacts:
#        paths:
#            - public
#    only:
#        variables:
#            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/

        
        
HTML_Check:
    stage: HTMLCheck
    services:
        -  docker
    before_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
        # pip install anybadge
         
    script:
        - export
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-view --log  --align --font
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --align --font --log;
            git checkout -B $Newbranch;
            message="Correct HTML Code";
            git add AixLib;
            echo $message;
            git commit -m "$message" ;
            git push --force http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            rm bin/06_Configfiles/exit.sh;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    only:
        variables:
            - $CI_COMMIT_MESSAGE !~ /Correct HTML Code/
mrpost:
    stage: post
    before_script:
        - apt-get update -y
        - apt-get install jq -y
        - pip install anybadge
    script:
        - anybadge -l HTML-logfile -v 2.22. -f HTML-logfile.svg 2=red 4=orange 8=yellow 10=green
        - newline=$' \n '
        - msg1=$'## This is a CI-Post \n '
        - msg2="Correct **HTML-Code** on your branch **$CI_COMMIT_REF_NAME**. "
        - msg3=" Do a merge request to push  your corrected **HTML code** on branch **$CI_MERGE_REQUEST_TARGET_BRANCH_NAME**   "
        - msg4=" To merge your corrected HTML code press the **Resolve WIP status** button and merge your **$CI_COMMIT_REF_NAME** into  **$CI_MERGE_REQUEST_TARGET_BRANCH_NAME**. "
        - msg5=" The branch **$CI_COMMIT_REF_NAME** will be deleted. " 
        - msg6=" After merge request **pull** your Repository in Github. " 
        - msg=$msg1$msg2$newline$msg3$newline$msg4$newline$msg5$newline$msg6
        - curl --request GET --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes | tee notes.json
        - mapfile -t ids < <(jq '.[].id' notes.json)
        - mapfile -t bodys < <(jq '.[].body' notes.json)
        - len=${#ids[@]}
        - for i in $(seq 0 $len); do if [[ ${bodys[i]} == *"This is a CI-Post"* ]]; then id=${ids[i]}; break; fi; done
        - if [ -z ${id+x} ]; then curl -d "body=$msg" --request POST --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes?body=note; else curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note; fi
        - curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note
        
    only:
        - merge_requests


Open_Merge_Request:
    stage: openMR
    only:
        - /^feature\/*/
    services:
        -  docker
    before_script:
        - sudo apt-get install jq -y
    script:
       - Newbranch=${Newbranch#${Praefix_Branch}}
       - TARGET_BRANCH=${TARGET_BRANCH#${Praefix_Branch}}
       - sudo chmod +x bin/06_Configfiles/autoMergeRequest.sh
       - git config --global user.email "${GITLAB_USER_EMAIL}"
       - git config --global user.name  "${GITLAB_USER_NAME}" 
       - bin/06_Configfiles/autoMergeRequest.sh
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code again/
            
Open_Pull_Request:
    stage: openMR
    only:
        - /^feature\/*/
    services:
        -  docker
    before_script:
        - sudo apt-get install jq -y
        - pip install requests
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
  
    script:
       - Newbranch=${Newbranch#${Praefix_Branch}}
       - TARGET_BRANCH=${TARGET_BRANCH#${Praefix_Branch}}
       # git clone --single-branch --branch $Newbranch https://git.rwth-aachen.de/${GITLAB_USER_NAME}/GitLabCI.git
       - GitHub_Username =  `python bin/02_CITests/SyntaxTests/api_github.py --GITHUB-REPOSITORY ${Github_Repository} --Working-Branch ${TARGET_BRANCH} --Correct-Branch ${Newbranch} --GITHUB-TOKEN ${GITHUB_API_TOKEN}`
       - git clone --single-branch --branch $Newbranch http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git
       - cd ${CI_PROJECT_TITLE}
       # git remote add mine https://github.com/SvenHinrichs/GitLabCI.git
       - git remote add mine http://${GitHub_Username}:${GITHUB_API_TOKEN}@github.com/${Github_Repository}.git
       - git push -u mine; git push --tags -u mine
       - sudo chmod +x bin/06_Configfiles/autoPullRequest.sh
       - bin/06_Configfiles/autoPullRequest.sh
       # python bin/02_CITests/SyntaxTests/api_github.py --GITHUB-REPOSITORY ${Github_Repository} --Working-Branch ${TARGET_BRANCH} --Correct-Branch ${Newbranch} --GITHUB-TOKEN ${GITHUB_API_TOKEN}
       
       
       
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code/
            - $CI_COMMIT_MESSAGE =~ /Correct HTML Code again/