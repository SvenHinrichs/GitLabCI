#!/bin/bash
image: registry.git.rwth-aachen.de/ebc/ebc_intern/dymola-docker:miniconda-latest

stages:
    - build
    - HTMLCheck
    - openMR
    - post
    - deploy
    - StyleCheck
    - Check
    - Simulate
    - RegressionTest

variables:
    Newbranch: Correct_HTML
    TARGET_BRANCH: test-branch


Check_AixLib_Airflow:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Airflow" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Airflow-log.txt
            - AixLib/AixLib.Airflow-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Check_AixLib_BoundaryConditions:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.BoundaryConditions" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.BoundaryConditions-log.txt
            - AixLib/AixLib.BoundaryConditions-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch
            
Check_AixLib_Controls:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Controls" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Controls-log.txt
            - AixLib/AixLib.Controls-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Check_AixLib_Electrical:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Electrical" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Electrical-log.txt
            - AixLib/AixLib.Electrical-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch
            
Check_AixLib_FastHVAC:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.FastHVAC" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.FastHVAC-log.txt
            - AixLib/AixLib.FastHVAC-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Check_AixLib_Fluid:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Fluid" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Fluid-log.txt
            - AixLib/AixLib.Fluid-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Check_AixLib_Media:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Media" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Media-log.txt
            - AixLib/AixLib.Media-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

#Check_AixLib_Systems:
#    stage: Check
#    services:
#        -  docker
#    before_script:
#        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
#        - export PIP_CACHE_DIR="/opt/cache/pip"
#        - source activate python36  
#        - python -V               # Print out python version for debugging
#        - export PYTHONIOENCODING=utf-8 # just in case
#    script:
#        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Systems" -p AixLib/package.mo 
#    artifacts:
#        when: on_failure
#        paths:
#            - AixLib/AixLib.Systems-log.txt
#            - AixLib/AixLib.Systems-Errorlog.txt
#        expire_in: 2 day 
#    allow_failure: true 
#    allow_failure: true 

Check_AixLib_ThermalZones:
    stage: Check
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.ThermalZones" -p AixLib/package.mo 
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.ThermalZones-log.txt
            - AixLib/AixLib.ThermalZones-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch
   
Simulate_AixLib_Airflow:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Airflow" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Airflow-log.txt
            - AixLib/AixLib.Airflow-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_BoundaryConditions:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.BoundaryConditions" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.BoundaryConditions-log.txt
            - AixLib/AixLib.BoundaryConditions-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_Controls:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Controls" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Controls-log.txt
            - AixLib/AixLib.Controls-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_Electrical:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Electrical" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Electrical-log.txt
            - AixLib/AixLib.Electrical-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_FastHVAC:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.FastHVAC" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.FastHVAC-log.txt
            - AixLib/AixLib.FastHVAC-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_Fluid:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Fluid" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Fluid-log.txt
            - AixLib/AixLib.Fluid-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_Media:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Media" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Media-log.txt
            - AixLib/AixLib.Media-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true      
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_Systems:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.Systems" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.Systems-log.txt
            - AixLib/AixLib.Systems-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true      
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Simulate_AixLib_ThermalZones:
    stage: Simulate
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/UnitTests/CheckPackages/validatetest.py -s "AixLib.ThermalZones" -p AixLib/package.mo --SimulateExamples
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib.ThermalZones-log.txt
            - AixLib/AixLib.ThermalZones-Errorlog.txt
        expire_in: 2 day 
    allow_failure: true      
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Regression_overall_coverage:
    stage: RegressionTest
    services:
        - docker
        
    before_script:
        - printenv
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case

    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py --coverage-only

    artifacts:
        when: on_failure
        paths:
            - AixLib/simulator-dymola.log

    retry:
        max: 2
        when: runner_system_failure
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch
            
Regressiontest_AixLib_Airflow:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Airflow --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Regressiontest_AixLib_BoundaryConditions:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.BoundaryConditions --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Regressiontest_AixLib_Controls:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Controls --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure       
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch    

#Regressiontest_AixLib_Electrical:
#      stage: RegressionTest
#      services:
#        -  docker
#      before_script:
#        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
#        - export PIP_CACHE_DIR="/opt/cache/pip"
#        - source activate python36
#        - python -V               # Print out python version for debugging
#        - dir
#        - export PYTHONIOENCODING=utf-8 # just in case
#      script:
#        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Electrical --tool dymola
#      artifacts:
#        when: on_failure
#        paths:
#          - AixLib/simulator-dymola.log
#      retry:
#        max: 2
#        when: runner_system_failure       

#Regressiontest_AixLib_FastHVAC:
#      stage: RegressionTest
#      services:
#        -  docker
#      before_script:
#        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
#        - export PIP_CACHE_DIR="/opt/cache/pip"
#        - source activate python36
#        - python -V               # Print out python version for debugging
#        - dir
#        - export PYTHONIOENCODING=utf-8 # just in case
#      script:
#        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.FastHVAC --tool dymola
#      artifacts:
#        when: on_failure
#       paths:
#          - AixLib/simulator-dymola.log
#      retry:
#        max: 2
 #       when: runner_system_failure  

Regressiontest_AixLib_Fluid:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Fluid --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure  
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Regressiontest_AixLib_Media:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Media --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure  
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch          

Regressiontest_AixLib_Systems:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.Systems --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure          
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch

Regressiontest_AixLib_ThermalZones:
    stage: RegressionTest
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36
        - python -V               # Print out python version for debugging
        - dir
        - pip install --upgrade git+https://github.com/MichaMans/BuildingsPy@testexamplescoverage
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - cd AixLib && python ../bin/02_CITests/UnitTests/runUnitTests.py -n 2 --batch --single-package AixLib.ThermalZones --tool dymola
    artifacts:
        when: on_failure
        paths:
          - AixLib/simulator-dymola.log
    retry:
        max: 2
        when: runner_system_failure        
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch          


            
trigger_branch:
    stage: build
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --log  --align --font
    after_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            message="Correct HTML AixLib";         
            git add AixLib; 
            echo $message;
            git commit -m "$message";
            git push http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    
    only:
        variables:
            - $CI_COMMIT_BRANCH == $Newbranch 

      
HTML_Check:
    stage: HTMLCheck
    services:
        -  docker
    before_script:
        - git config --global user.name "${GITLAB_USER_NAME}" 
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
        - git diff --raw HEAD^1
    script:
        # python bin/CITests/SyntaxTests/html_tidy_errors.py -p "AixLib" --correct-overwrite --log --align --font 
        - python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-view --log  --align --font
        # python bin/02_CITests/SyntaxTests/html_tidy_errors.py -p "AixLib" --correct-overwrite --log  --align --font
        # if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then git checkout -b $Newbranch; else echo exit 0 ; fi
        # if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --log  --align --font; else echo exit 0 ; fi
        - if cat bin/06_Configfiles/exit.sh | grep "exit 1"; then 
            python bin/02_CITests/SyntaxTests/html_tidy_errors.py --s "AixLib" --correct-overwrite --align --font --log;
            git branch;
            git checkout $Newbranch 2>/dev/null || git checkout -b $Newbranch;
            message="Correct HTML AixLib";
            git add AixLib;
            echo $message;
            git commit -m "$message" ;
            git push http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:${Newbranch}";
            rm bin/06_Configfiles/exit.sh;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - AixLib/HTML-logfile.txt
        expire_in: 2 day 
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch       

            

    
    
    
mrpost:
    stage: post
    script:
        - newline=$' \n '
        - msg1=$'## This is a CI-Post \n '
        # msg2="**HTML Correction** on your branch $TARGET_BRANCH 
        # msg3="**Pyint score** on branch $CI_COMMIT_REF_NAME [![pylint]( $CI_PAGES_URL/$CI_COMMIT_REF_NAME/pylint.svg )]( $CI_PAGES_URL/$CI_COMMIT_REF_NAME/pylint.html ) .  "
        # msg4="You can view the **Pylint Log** by clicking on the badges  "
        # msg=$msg1$msg2$newline$msg3$newline$msg4
        - curl --request GET --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes 
        # mapfile -t ids < <(jq '.[].id' notes.json)
        # mapfile -t bodys < <(jq '.[].body' notes.json)
        # len=${#ids[@]}
        # for i in $(seq 0 $len); do if [[ ${bodys[i]} == *"This is a CI-Post"* ]]; then id=${ids[i]}; break; fi; done
        # if [ -z ${id+x} ]; then curl -d "body=$msg" --request POST --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes?body=note; else curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note; fi
        # curl -d "body=$msg" --request PUT --header "PRIVATE-TOKEN:$GL_TOKEN" https://git.rwth-aachen.de/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes/$id/?body=note
    only:
        - merge_requests


Open_Merge_Request:
    stage: openMR
    only:
        - /^feature\/*/
    services:
        -  docker
    before_script:
        - sudo apt-get install jq -y
    script:
    
       - sudo chmod +x bin/06_Configfiles/autoMergeRequest.sh
       - git config --global user.email "${GITLAB_USER_EMAIL}"
       - git config --global user.name  "${GITLAB_USER_NAME}" 
       - bin/06_Configfiles/autoMergeRequest.sh
    only:
        variables:
            - $CI_COMMIT_BRANCH == $Newbranch
    
Style_Check_AixLib:
    stage: StyleCheck
    services:
        -  docker
    before_script:
        - Xvfb :77 -extension RANDR -extension GLX & export DISPLAY=:77.0 &&
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate python36  
        - python -V               # Print out python version for debugging
        - export PYTHONIOENCODING=utf-8 # just in case
    script:
        - python bin/02_CITests/SyntaxTests/StyleChecking.py -s "AixLib.Airflow.Multizone.DoorDiscretizedOpen" -p AixLib/package.mo
    artifacts:
        when: on_failure
        paths:
            - AixLib/AixLib_StyleCheckLog.html
            - AixLib/AixLib_StyleErrorLog.html
        expire_in: 2 day 
    allow_failure: true 
    
    only:
        variables:
            - $CI_COMMIT_BRANCH != $Newbranch 

        
#Push_To_GitHub:

#    stage: deploy
#    services:
#        -  docker
#    script:
#       - git remote add github https://github.com/SvenHinrichs/GitLabCI.git
#       - git push github $TARGET_BRANCH 
       
#    only: 
        # $Newbranch   
#        - merge_requests

Merge_To_Branch:
    stage: deploy
    services:
        -  docker
    script:
       - git config --global user.email "${GITLAB_USER_EMAIL}"
       - git config --global user.name  "${GITLAB_USER_NAME}" 
       # git checkout -b $Newbranch
       - git fetch origin
       - git checkout origin/master
       - git merge --no-ff Correct_HTML
       - git push http://${GITLAB_USER_LOGIN}:${GL_TOKEN}@${CI_SERVER_HOST}/${GITLAB_USER_LOGIN}/${CI_PROJECT_NAME}.git "HEAD:master"
       - git branch -d Correct_HTML
    only: 
        # $Newbranch   
        - Branch
  
            
        
            